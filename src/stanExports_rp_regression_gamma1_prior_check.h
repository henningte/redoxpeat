// Generated by rstantools.  Do not edit by hand.

/*
    redoxpeat is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    redoxpeat is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with redoxpeat.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_rp_regression_gamma1_prior_check_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_rp_regression_gamma1_prior_check");
    reader.add_event(47, 45, "end", "model_rp_regression_gamma1_prior_check");
    return reader;
}
#include <stan_meta_header.hpp>
class model_rp_regression_gamma1_prior_check
  : public stan::model::model_base_crtp<model_rp_regression_gamma1_prior_check> {
private:
        int N_i;
        int N_j;
        int k;
        std::vector<int> id_layers_measurements;
        matrix_d X;
        double y_layers_scale_factor;
        double mu_beta_0;
        double sigma_beta_0;
        double lambda_2;
        double lambda_1;
        vector_d mu_betas;
        vector_d sigma_betas;
public:
    model_rp_regression_gamma1_prior_check(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_rp_regression_gamma1_prior_check(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_rp_regression_gamma1_prior_check_namespace::model_rp_regression_gamma1_prior_check";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N_i", "int", context__.to_vec());
            N_i = int(0);
            vals_i__ = context__.vals_i("N_i");
            pos__ = 0;
            N_i = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_i", N_i, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N_j", "int", context__.to_vec());
            N_j = int(0);
            vals_i__ = context__.vals_i("N_j");
            pos__ = 0;
            N_j = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_j", N_j, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            check_greater_or_equal(function__, "k", k, 1);
            current_statement_begin__ = 9;
            validate_non_negative_index("id_layers_measurements", "N_i", N_i);
            context__.validate_dims("data initialization", "id_layers_measurements", "int", context__.to_vec(N_i));
            id_layers_measurements = std::vector<int>(N_i, int(0));
            vals_i__ = context__.vals_i("id_layers_measurements");
            pos__ = 0;
            size_t id_layers_measurements_k_0_max__ = N_i;
            for (size_t k_0__ = 0; k_0__ < id_layers_measurements_k_0_max__; ++k_0__) {
                id_layers_measurements[k_0__] = vals_i__[pos__++];
            }
            size_t id_layers_measurements_i_0_max__ = N_i;
            for (size_t i_0__ = 0; i_0__ < id_layers_measurements_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id_layers_measurements[i_0__]", id_layers_measurements[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("X", "N_j", N_j);
            validate_non_negative_index("X", "k", k);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N_j,k));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_j, k);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = k;
            size_t X_j_1_max__ = N_j;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "y_layers_scale_factor", "double", context__.to_vec());
            y_layers_scale_factor = double(0);
            vals_r__ = context__.vals_r("y_layers_scale_factor");
            pos__ = 0;
            y_layers_scale_factor = vals_r__[pos__++];
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "mu_beta_0", "double", context__.to_vec());
            mu_beta_0 = double(0);
            vals_r__ = context__.vals_r("mu_beta_0");
            pos__ = 0;
            mu_beta_0 = vals_r__[pos__++];
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "sigma_beta_0", "double", context__.to_vec());
            sigma_beta_0 = double(0);
            vals_r__ = context__.vals_r("sigma_beta_0");
            pos__ = 0;
            sigma_beta_0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_beta_0", sigma_beta_0, 0);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "lambda_2", "double", context__.to_vec());
            lambda_2 = double(0);
            vals_r__ = context__.vals_r("lambda_2");
            pos__ = 0;
            lambda_2 = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda_2", lambda_2, 0);
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "lambda_1", "double", context__.to_vec());
            lambda_1 = double(0);
            vals_r__ = context__.vals_r("lambda_1");
            pos__ = 0;
            lambda_1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "lambda_1", lambda_1, 0);
            current_statement_begin__ = 18;
            validate_non_negative_index("mu_betas", "k", k);
            context__.validate_dims("data initialization", "mu_betas", "vector_d", context__.to_vec(k));
            mu_betas = Eigen::Matrix<double, Eigen::Dynamic, 1>(k);
            vals_r__ = context__.vals_r("mu_betas");
            pos__ = 0;
            size_t mu_betas_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < mu_betas_j_1_max__; ++j_1__) {
                mu_betas(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("sigma_betas", "k", k);
            context__.validate_dims("data initialization", "sigma_betas", "vector_d", context__.to_vec(k));
            sigma_betas = Eigen::Matrix<double, Eigen::Dynamic, 1>(k);
            vals_r__ = context__.vals_r("sigma_betas");
            pos__ = 0;
            size_t sigma_betas_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < sigma_betas_j_1_max__; ++j_1__) {
                sigma_betas(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_rp_regression_gamma1_prior_check() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu_j");
        names__.push_back("y");
        names__.push_back("betas");
        names__.push_back("y_pop");
        names__.push_back("sigma_2");
        names__.push_back("sigma_j");
        names__.push_back("y_layers_mu");
        names__.push_back("mu_j_scaled");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_i);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_j);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_rp_regression_gamma1_prior_check_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 24;
            validate_non_negative_index("mu_j", "N_j", N_j);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_j(N_j);
            stan::math::initialize(mu_j, DUMMY_VAR__);
            stan::math::fill(mu_j, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("y", "N_i", N_i);
            std::vector<double> y(N_i, double(0));
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("betas", "k", k);
            Eigen::Matrix<double, Eigen::Dynamic, 1> betas(k);
            stan::math::initialize(betas, DUMMY_VAR__);
            stan::math::fill(betas, DUMMY_VAR__);
            current_statement_begin__ = 28;
            double y_pop;
            (void) y_pop;  // dummy to suppress unused var warning
            stan::math::initialize(y_pop, DUMMY_VAR__);
            stan::math::fill(y_pop, DUMMY_VAR__);
            stan::math::assign(y_pop,normal_rng(mu_beta_0, sigma_beta_0, base_rng__));
            current_statement_begin__ = 29;
            double sigma_2;
            (void) sigma_2;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_2, DUMMY_VAR__);
            stan::math::fill(sigma_2, DUMMY_VAR__);
            stan::math::assign(sigma_2,exponential_rng(lambda_2, base_rng__));
            current_statement_begin__ = 30;
            validate_non_negative_index("sigma_j", "N_j", N_j);
            std::vector<double> sigma_j(N_j, double(0));
            stan::math::initialize(sigma_j, DUMMY_VAR__);
            stan::math::fill(sigma_j, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("y_layers_mu", "N_j", N_j);
            std::vector<double> y_layers_mu(N_j, double(0));
            stan::math::initialize(y_layers_mu, DUMMY_VAR__);
            stan::math::fill(y_layers_mu, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("mu_j_scaled", "N_j", N_j);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_j_scaled(N_j);
            stan::math::initialize(mu_j_scaled, DUMMY_VAR__);
            stan::math::fill(mu_j_scaled, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 33;
            for (int i = 1; i <= k; ++i) {
                current_statement_begin__ = 34;
                stan::model::assign(betas, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_rng(get_base1(mu_betas, i, "mu_betas", 1), get_base1(sigma_betas, i, "sigma_betas", 1), base_rng__), 
                            "assigning variable betas");
            }
            current_statement_begin__ = 36;
            for (int i = 1; i <= N_j; ++i) {
                current_statement_begin__ = 37;
                stan::model::assign(y_layers_mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp((y_pop + multiply(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), betas))), 
                            "assigning variable y_layers_mu");
                current_statement_begin__ = 38;
                stan::model::assign(mu_j, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_rng((pow(get_base1(y_layers_mu, i, "y_layers_mu", 1), 2) / pow(sigma_2, 2)), (get_base1(y_layers_mu, i, "y_layers_mu", 1) / (pow(sigma_2, 2) * y_layers_scale_factor)), base_rng__), 
                            "assigning variable mu_j");
                current_statement_begin__ = 39;
                stan::math::assign(mu_j_scaled, divide(mu_j, y_layers_scale_factor));
                current_statement_begin__ = 40;
                stan::model::assign(sigma_j, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exponential_rng(lambda_1, base_rng__), 
                            "assigning variable sigma_j");
            }
            current_statement_begin__ = 42;
            for (int i = 1; i <= N_i; ++i) {
                current_statement_begin__ = 43;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            gamma_rng((pow(get_base1(mu_j_scaled, get_base1(id_layers_measurements, i, "id_layers_measurements", 1), "mu_j_scaled", 1), 2) / pow(get_base1(sigma_j, get_base1(id_layers_measurements, i, "id_layers_measurements", 1), "sigma_j", 1), 2)), (get_base1(mu_j_scaled, get_base1(id_layers_measurements, i, "id_layers_measurements", 1), "mu_j_scaled", 1) / pow(get_base1(sigma_j, get_base1(id_layers_measurements, i, "id_layers_measurements", 1), "sigma_j", 1), 2)), base_rng__), 
                            "assigning variable y");
            }
            // validate, write generated quantities
            current_statement_begin__ = 24;
            check_greater_or_equal(function__, "mu_j", mu_j, 0);
            size_t mu_j_j_1_max__ = N_j;
            for (size_t j_1__ = 0; j_1__ < mu_j_j_1_max__; ++j_1__) {
                vars__.push_back(mu_j(j_1__));
            }
            current_statement_begin__ = 25;
            size_t y_k_0_max__ = N_i;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                vars__.push_back(y[k_0__]);
            }
            current_statement_begin__ = 26;
            size_t betas_j_1_max__ = k;
            for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
                vars__.push_back(betas(j_1__));
            }
            current_statement_begin__ = 28;
            vars__.push_back(y_pop);
            current_statement_begin__ = 29;
            check_greater_or_equal(function__, "sigma_2", sigma_2, 0);
            vars__.push_back(sigma_2);
            current_statement_begin__ = 30;
            size_t sigma_j_i_0_max__ = N_j;
            for (size_t i_0__ = 0; i_0__ < sigma_j_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_j[i_0__]", sigma_j[i_0__], 0);
            }
            size_t sigma_j_k_0_max__ = N_j;
            for (size_t k_0__ = 0; k_0__ < sigma_j_k_0_max__; ++k_0__) {
                vars__.push_back(sigma_j[k_0__]);
            }
            current_statement_begin__ = 31;
            size_t y_layers_mu_i_0_max__ = N_j;
            for (size_t i_0__ = 0; i_0__ < y_layers_mu_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y_layers_mu[i_0__]", y_layers_mu[i_0__], 0);
            }
            size_t y_layers_mu_k_0_max__ = N_j;
            for (size_t k_0__ = 0; k_0__ < y_layers_mu_k_0_max__; ++k_0__) {
                vars__.push_back(y_layers_mu[k_0__]);
            }
            current_statement_begin__ = 32;
            check_greater_or_equal(function__, "mu_j_scaled", mu_j_scaled, 0);
            size_t mu_j_scaled_j_1_max__ = N_j;
            for (size_t j_1__ = 0; j_1__ < mu_j_scaled_j_1_max__; ++j_1__) {
                vars__.push_back(mu_j_scaled(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_rp_regression_gamma1_prior_check";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mu_j_j_1_max__ = N_j;
        for (size_t j_1__ = 0; j_1__ < mu_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betas_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "y_pop";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_2";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < sigma_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_layers_mu_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < y_layers_mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_layers_mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_scaled_j_1_max__ = N_j;
        for (size_t j_1__ = 0; j_1__ < mu_j_scaled_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_j_scaled" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mu_j_j_1_max__ = N_j;
        for (size_t j_1__ = 0; j_1__ < mu_j_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_j" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_k_0_max__ = N_i;
        for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t betas_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "y_pop";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_2";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < sigma_j_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_j" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_layers_mu_k_0_max__ = N_j;
        for (size_t k_0__ = 0; k_0__ < y_layers_mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_layers_mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_scaled_j_1_max__ = N_j;
        for (size_t j_1__ = 0; j_1__ < mu_j_scaled_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_j_scaled" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_rp_regression_gamma1_prior_check_namespace::model_rp_regression_gamma1_prior_check stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
